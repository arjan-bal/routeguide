syntax = "proto3";

package routeguide;

option go_package = "arjansbal/routeguide";

service RouteGuide {
    // Obtains features at a given position.
    rpc GetFeature(Point) returns (Feature) {}

    // Streams the features that lie within the given rectangle.
    rpc ListFeatures(Rectangle) returns (stream Feature) {}

    // Accepts a stream of points representing the route being traversed.
    // Returns a route summary when all the points are received.
    rpc RecordRoute(stream Point) returns (RouteSummary) {}

    // Received a stream of notes and responds with a stream of notes for the
    // route being traversed.
    rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
    int32 latitute = 1;
    int32 longitude = 2;
}

// Some intrresting feature located at a point.
message Feature {
    // The name of the feature.
    string name = 1;
    // The location of the feature.
    Point location  = 2;
}

// A rectangle represented by two diagonally opposite points.
message Rectangle {
    // One corner of the rectangle.
    Point lo = 1;
    // The other corner of the rectangle.
    Point hi = 2;
}

// A summary of the route including the number of features, points, the distance
// convered and the time elapsed.
message RouteSummary {
    // The number of features seen on the route.
    int32 feature_count = 1;
    // The number of points on the route.
    int32 point_count = 2;
    // The distance covered in meters.
    int32 distance_covered = 3;
    // The duration elapsed in seconds.
    int32 time_elapsed = 4;
}


// A message sent from a particular location.
message RouteNote {
    // The location from which the message is sent.
    Point location = 1;
    // The message to be sent.
    string message = 2;
}
